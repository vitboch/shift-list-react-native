name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_ENV: test
  CI: true

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint -- --max-warnings 0

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        if: always() && matrix.node-version == 18
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install dependencies
        run: npm ci

      - name: Check Android files
        run: |
          if [ -f "android/gradlew" ]; then
            echo "Gradle wrapper exists"
          else
            echo "Gradle wrapper not found"
            exit 1
          fi

      - name: Clean Android build
        run: |
          cd android
          ./gradlew clean

      - name: Build Android APK
        run: |
          cd android
          ./gradlew assembleDebug --no-daemon

      - name: Check APK exists
        run: |
          if [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "APK file exists"
            ls -la android/app/build/outputs/apk/debug/
          else
            echo "APK file not found"
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: test
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install dependencies
        run: npm ci

      - name: Check iOS files
        run: |
          if [ -f "ios/Podfile" ]; then
            echo "Podfile exists"
          else
            echo "Podfile not found"
            exit 1
          fi

      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install iOS dependencies
        run: |
          cd ios
          pod install --repo-update
        continue-on-error: false

      - name: Clean iOS build
        run: |
          cd ios
          xcodebuild clean -workspace ShiftListApp.xcworkspace -scheme ShiftListApp

      - name: Build iOS
        run: |
          npx react-native run-ios --configuration Release --simulator "iPhone 15" --no-packager
        env:
          IOS_DEPLOYMENT_TARGET: 15.0

      - name: Check iOS build exists
        run: |
          if [ -d "ios/build" ]; then
            echo "iOS build directory exists"
            ls -la ios/build/
          else
            echo "iOS build directory not found"
            exit 1
          fi

      - name: Upload iOS build
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: ios/build/

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run dependency check
        run: npx audit-ci --moderate

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint -- --max-warnings 0

      - name: Run Prettier check
        run: npm run format:check

      - name: Type check
        run: npm run type-check
